apiVersion: v1
kind: ConfigMap
metadata:
  name: fluent-bit-config
  namespace: jpuv-system
data:
  fluent-bit.conf: |

    [SERVICE]
        Flush        5
        Log_Level    debug
        Parsers_File parsers.conf
        Health_check On
      
    @INCLUDE input-kubernetes.conf
    @INCLUDE filter-kubernetes.conf
    @INCLUDE output-opensearch.conf
    @INCLUDE parsers.conf

    [INPUT]
        Name              tail
        Path              /var/log/containers/*.log, /var/log/pods/*.log
        Tag               kube.*
        Refresh_Interval  5
        daemon            Off
        Mem_Buf_Limit     5MB
        Skip_Long_Lines   On
        
    [INPUT]
        Name              cpu
        Tag               cpu.local

    [FILTER]
        Name                kubernetes
        Match               kube.*
        Kube_Tag_Prefix     kube.var.log.containers.
        Merge_Log           On
        Keep_Log            Off
        K8S-Logging.Parser  Off
        K8S-Logging.Exclude Off
        Annotations         Off

    [FILTER]
        Name            modify
        Match           *
        Record          @timestamp ${time}
    
    [FILTER]
        Name         parser
        Match        kube.*
        Key_Name     log
        Parser       docker  # Use your defined docker parser
        Reserve_Data On
        Preserve_Key On

    [FILTER]
        Name         lua
        Match        *
        script       /fluent-bit/scripts/epoch_to_time.lua
        call         cb_print

     [OUTPUT]
        Name            opensearch
        Match           *
        Host            vpc-vz-jpuv-opensearch-jpuv-6pxpxpfv3y7rsysjwkmz4melwa.us-east-1.es.amazonaws.com
        Port            443
        HTTPS_User      ${OPENSEARCH_USER}
        HTTPS_Passwd    ${OPENSEARCH_PASSWORD}
        #HTTPS_User      jpuvadmin
        #HTTPS_Passwd    Search1!
        Index           fluent-bit
        tls             On
        AWS_Service_Name aoss
        AWS_Auth        On
        tls.verify      Off 
        Type            _doc
        write_operation upsert
        Time_Key        @timestamp
        Time_Key_Format %Y-%m-%dT%H:%M:%S.%LZ
        Suppress_Type_Name On
        AWS_Region      us-east-1
        Logstash_Format On
        Retry_Limit     False

    [OUTPUT]
        Name   stdout
        Match  *

    [OUTPUT]
        Name            es
        Match           cpu.local
        Host            vpc-vz-jpuv-opensearch-jpuv-6pxpxpfv3y7rsysjwkmz4melwa.us-east-1.es.amazonaws.com
        Port            443
        write_operation upsert
        HTTPS_User      ${OPENSEARCH_USER}
        HTTPS_Passwd    ${OPENSEARCH_PASSWORD}
        Index           fluentbit-cpu
        tls             On
        AWS_Service_Name aoss
        AWS_Auth        On
        tls.verify      Off
        Type            _doc
        Time_Key        @timestamp
        Time_Key_Format %Y-%m-%dT%H:%M:%S.%LZ
        Suppress_Type_Name On
        AWS_Region      us-east-1
        Logstash_Format On
        Retry_Limit     False

  parsers.conf: |

    [PARSER]
        Name   docker
        Format json 
        Time_Key @timestamp
        Time_Format %Y-%m-%dT%H:%M:%S.%LZ
        Time_Keep   On
    
    [PARSER]
        Name json_parser
        Format json
        Time_Key @timestamp
        Time_Format %Y-%m-%dT%H:%M:%S.%LZ
        Time_Keep   On

    [PARSER]
        Name        my_regex_parser
        Format      regex
        Regex       ^(?<time>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}) (?<level>[A-Z]+) (?<message>.*)$
        Time_Key    time
        Time_Format %Y-%m-%d %H:%M:%S

    [PARSER]
        Name         custom_log_time
        Format       regex
        Regex        ^(?<message>.*?) (?<day>\w{3}) (?<month>\w{3}) (?<date>\d{2}) (?<hour>\d{2}):(?<minute>\d{2}):(?<second>\d{2}) (?<ampm>AM|PM) (?<tz>\w{3}) (?<year>\d{4})
        Time_Key     time
        Time_Format  %b %d %I:%M:%S %p %Y
        Time_Keep    On
        Time_Offset  -0400
   
    [PARSER]
        Name        syslog-rfc5424
        Format      regex
        Regex       ^\<(?<pri>[0-9]{1,5})\>1 (?<time>[^ ]+) (?<host>[^ ]+) (?<ident>[^ ]+) (?<pid>[-0-9]+) (?<msgid>[^ ]+) (?<extradata>(\[(.*)\]|-)) (?<message>.+)$
        Time_Key    time
        Time_Format %Y-%m-%dT%H:%M:%S.%L
        Time_Keep   On
        Types pid:integer

    [PARSER]
        Name        cri
        Format      regex
        Regex       ^(?<time>[^ ]+) (?<stream>stdout|stderr) (?<logtag>[^ ]*) (?<log>.*)$
        Time_Key    time
        Time_Format %Y-%m-%dT%H:%M:%S.%L%z

  epoch_to_time.lua: |

    function cb_print(tag, timestamp, record)
        local ts = record["cpu.local"]
        if ts and type(ts) == "table" and #ts >= 1 then
            local epoch = ts[1]
            record["@timestamp"] = os.date("!%Y-%m-%dT%H:%M:%SZ", epoch)
        end
        return 1, record
    end
